generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int           @id @default(autoincrement())
  email              String        @unique
  name               String?
  profileImage       String?
  platformPreference String? // 'spotify', 'apple', 'deezer', 'youtube'
  passwordHash       String?
  createdAt          DateTime      @default(now())
  posts              SongPost[]
  friends            Friendship[]  @relation("UserFriends")
  friendOf           Friendship[]  @relation("FriendOf")
  devices            DeviceToken[]
  likes              Like[]
}

model SongPost {
  id             Int      @id @default(autoincrement())
  title          String
  artist         String
  description    String? // Optional description field
  link           String // Keep for backward compatibility
  deezerLink     String?
  spotifyLink    String?
  appleMusicLink String?
  youtubeLink    String?
  coverUrl       String?
  date           DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])
  userId         Int
  likes          Like[]
}

model Friendship {
  id       Int  @id @default(autoincrement())
  user     User @relation("UserFriends", fields: [userId], references: [id])
  userId   Int
  friend   User @relation("FriendOf", fields: [friendId], references: [id])
  friendId Int
}

model DeviceToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  token     String   @unique
  platform  String
  createdAt DateTime @default(now())
}

model Like {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  songPost   SongPost @relation(fields: [songPostId], references: [id], onDelete: Cascade)
  songPostId Int
  createdAt  DateTime @default(now())

  @@unique([userId, songPostId])
}
